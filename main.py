import sqlite3
import calendar
import datetime
import os
import re
import config

HELP_MESSAGE = f'''–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –±–æ—Ç–∞ {config.USERNAME_BOT}\n\n
–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ - —ç—Ç–æ —Å–ª–æ–≤–∞ –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–æ—Å—Ç–æ—è—Ç—å –≤ –≤–∞—à–µ–º –∑–∞–ø—Ä–æ—Å–µ, –Ω–µ–≤–∞–∂–Ω–æ –∫–∞–∫ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞–Ω –≤–æ–ø—Ä–æ—Å, \
—Ö–≤–∞—Ç–∞–µ—Ç –Ω–∞–ø–∏—Å–∞—Ç—å –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ (–ø–æ—Ä—è–¥–æ–∫ –Ω–µ–≤–∞–∂–µ–Ω) –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∑–∞–ø—Ä–æ—Å.\n
–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–º–µ—Ç–∏—Ç—å –±–æ—Ç–∞ {config.USERNAME_BOT}:\n
    –ü—Ä–∏–º–µ—Ä: {config.USERNAME_BOT} —Å–µ–≥–æ–¥–Ω—è –ø–∞—Ä—ã 
    –î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å: 
        1. –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–∞—Ä –Ω–∞ —Å–µ–≥–æ–¥–Ω—è, –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:  ¬´–ø–∞—Ä—ã —Å–µ–≥–æ–¥–Ω—è¬ª\n
        2. –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–∞—Ä –Ω–∞ –∑–∞–≤—Ç—Ä–∞, –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:  ¬´–ø–∞—Ä—ã –∑–∞–≤—Ç—Ä–∞¬ª\n
        3. –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é, –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ:  ¬´—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ¬ª\n
        4. –†–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –Ω–µ–¥–µ–ª–∏, –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ:  ¬´—Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è¬ª\n
        5. –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é –Ω–µ–¥–µ–ª—é, –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ:  ¬´"—Ü–∏—Ñ—Ä–∞ –Ω–µ–¥–µ–ª–∏" —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ¬ª\n
        6. –ì–¥–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç –ø–∞—Ä–∞ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤—Ä–µ–º–µ–Ω–∏, –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:  ¬´–≥–¥–µ –ø–∞—Ä–∞¬ª\n
        7. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–π, –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:  ¬´–∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏ | (1|2|3) –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏—è¬ª\n
        8. –ù–æ–º–µ—Ä –Ω–µ–¥–µ–ª–∏, –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ ¬´–Ω–æ–º–µ—Ä –Ω–µ–¥–µ–ª–∏¬ª\n
        9. –ó–∞—á–µ—Ç –∏–ª–∏ —ç–∫–∑–∞–º–µ–Ω –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É, –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ ¬´"–Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞"¬ª\n
        10. –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤, –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ ¬´–ø—Ä–µ–¥–º–µ—Ç—ã¬ª\n
        12. –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏, –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ ¬´—Å–µ—Å—Å–∏—è | —ç–∫–∑–∞–º–µ–Ω—ã¬ª\n\n
    –ß—Ç–æ –±—ã –Ω–∞–∑–Ω–∞—á–∏—Ç—å –¥–µ–∂—É—Ä–Ω–æ–≥–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n
        1. –î–µ–∂—É—Ä–Ω—ã–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è: –ö–æ–º–∞–Ω–¥–∞ /duty\n
        2. –í —Å–ª—É—á–∞–µ –µ—Å–ª–∏ –¥–µ–∂—É—Ä–Ω—ã–π –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç: –ö–æ–º–∞–Ω–¥–∞ /next\n
        !!! –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å –¥–µ–∂—É—Ä—Å—Ç–≤–æ: –ö–æ–º–∞–Ω–¥–∞ /success\n\n
        
        
–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –í–∏–∫–∏–ø–µ–¥–∏—é:\n
    –î–ª—è –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ –≤–∏–∫–∏–ø–µ–¥–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–ø–∏—Å–∞—Ç—å –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ, –∞ –∑–∞—Ç–µ–º –ø–æ–∏—Å–∫–æ–≤–æ–µ.\n
    –ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ ¬´–≤–∏–∫–∏ | wiki¬ª.
    –ü—Ä–∏–º–µ—Ä—ã:
        –≤–∏–∫–∏ –ø–∏—Ç–æ–Ω
        –≤–∏–∫–∏ python
        wiki python
        wiki –ø–∏—Ç–æ–Ω'''

START_MESSAGE = '''–ù–∞ —á—Ç–æ –≥–æ—Ä–∞–∑–¥ USkudu?

üåà USkudu –∑–Ω–∞–µ—Ç –∫–∞–∫–∏–µ —Å–µ–≥–æ–¥–Ω—è/–∑–∞–≤—Ç—Ä–∞ –ø–∞—Ä—ã;
üåà USkudu –º–æ–∂–µ—Ç –Ω–∞–∑–≤–∞—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–∏;
üåà USkudu –∑–Ω–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–π;
üåà USkudu –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ;
üåà USkudu –∑–Ω–∞–µ—Ç –ø–æ –∫–∞–∫–æ–π –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–µ –∑–∞—á–µ—Ç, –∞ –ø–æ –∫–∞–∫–æ–π —ç–∫–∑–∞–º–µ–Ω;
üåà USkudu –∑–Ω–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è –≤—Å–µ—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤;
üåà USkudu –∑–Ω–∞–µ—Ç –∫–æ–≥–¥–∞ —ç–∫–∑–∞–º–µ–Ω—ã;
üåà USkudu –∑–Ω–∞–µ—Ç –∫—Ç–æ –¥–µ–∂—É—Ä–Ω—ã–π;
üåà USkudu –∑–Ω–∞–µ—Ç –≥–¥–µ —Å–µ–π—á–∞—Å –ø–∞—Ä–∞;
üåà USkudu –∑–Ω–∞–µ—Ç –≤–∏–∫–∏–ø–µ–¥–∏—é.'''


class TelegramBot:
    def __init__(self):
        self.sqlite_connection = sqlite3.connect('db.sqlite3', check_same_thread=False)
        self.cursor = self.sqlite_connection.cursor()
        self.num_week = self.cursor.execute('SELECT number FROM week').fetchone()[0]
        self.name_week = {1: 'first_', 2: 'second_', 3: 'third_', 4: 'fourth_'}
        self.tz = datetime.timezone(datetime.timedelta(hours=3), name='–ú–°–ö')
        self.duty_today = ''
        self.students = self.cursor.execute('SELECT name, counter FROM students').fetchall()
        self.set_subjects = {i[0].lower().strip() for i in self.cursor.execute(
            f'''SELECT subjects.name FROM subjects''').fetchall()}

    def today(self):
        """the method that answers the question "what are the pairs today" """
        t = str(datetime.datetime.now(tz=self.tz))[:10]
        t = datetime.datetime.strptime(t, "%Y-%m-%d")
        day_week = calendar.day_name[t.today().weekday()].lower()
        name_table = self.name_week[self.num_week] + day_week
        if day_week == 'sunday':
            return '–°–µ–≥–æ–¥–Ω—è –≤—ã—Ö–æ–¥–Ω–æ–π!'
        data = self.cursor.execute(
            f'''SELECT subjects.name, type, name_teacher, number_auditorium, name_subgroup  
            FROM {name_table} 
            LEFT JOIN subjects ON {name_table}.id_subjects = subjects.id
            LEFT JOIN teachers ON {name_table}.id_teachers = teachers.id
            LEFT JOIN audiences ON {name_table}.id_audiences = audiences.id
            LEFT JOIN type_pair ON {name_table}.id_type_pair = type_pair.id
            LEFT JOIN subgroup ON {name_table}.id_subgroup = subgroup.id''').fetchall()

        answer = ''
        for ind, value in enumerate(data, 1):
            if value[0] is None:
                answer += f'{ind}) ------ \n'
            elif None in value:
                if value[-1] is None and value.count(None) == 1:
                    if '|' not in value[2]:
                        answer += f'{ind}) {" ".join(list(value[:-1]))}\n\n'
                    else:
                        try:
                            name_teacher, number_aud = value[2].split('|'), value[3].split('|')
                            answer += f'''{ind}) {value[0]} {value[1]} \n1—è –ø–æ–¥–≥—Ä—É–ø–ø–∞ {name_teacher[0]} {number_aud[0]}
                            \n2—è –ø–æ–¥–≥—Ä—É–ø–ø–∞ {name_teacher[1]} {number_aud[1]}\n\n'''
                        except:
                            answer += '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –ë–î\n\n'
                elif value.count(None) == 2:
                    answer += f'{ind}) {" ".join([i for i in value if i is not None])}\n\n'
                else:
                    answer += f'{ind}) {" ".join(["–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –ë–î" if i is None else i for i in value])}\n\n'

            else:
                answer += f'{ind}) {" ".join(list(value))}\n\n'
        return answer

    def tomorrow(self):
        """the method that answers the question "what are the pairs tomorrow" """
        days = {'monday': 'tuesday',
                'tuesday': 'wednesday',
                'wednesday': 'thursday',
                'thursday': 'friday',
                'friday': 'saturday',
                'saturday': '–ó–∞–≤—Ç—Ä–∞ –≤—ã—Ö–æ–¥–Ω–æ–π!',
                'sunday': 'monday'}
        t = str(datetime.datetime.now(tz=self.tz))[:10]
        t = datetime.datetime.strptime(t, "%Y-%m-%d")
        day_week = calendar.day_name[t.today().weekday()].lower()
        if day_week == 'saturday':
            return days[day_week]
        if day_week == 'sunday':
            self.update()
        name_table = self.name_week[self.num_week] + days[day_week]
        data = self.cursor.execute(
            f'''SELECT subjects.name, type, name_teacher, number_auditorium, name_subgroup  
                    FROM {name_table} 
                    LEFT JOIN subjects ON {name_table}.id_subjects = subjects.id
                    LEFT JOIN teachers ON {name_table}.id_teachers = teachers.id
                    LEFT JOIN audiences ON {name_table}.id_audiences = audiences.id
                    LEFT JOIN type_pair ON {name_table}.id_type_pair = type_pair.id
                    LEFT JOIN subgroup ON {name_table}.id_subgroup = subgroup.id''').fetchall()
        answer = ''
        for ind, value in enumerate(data, 1):
            if value[0] is None:
                answer += f'{ind}) ------ \n'
            elif None in value:
                if value[-1] is None and value.count(None) == 1:
                    if '|' not in value[2]:
                        answer += f'{ind}) {" ".join(list(value[:-1]))}\n\n'
                    else:
                        try:
                            name_teacher, number_aud = value[2].split('|'), value[3].split('|')
                            answer += f'{ind}) {value[0]} {value[1]}\n 1—è –ø–æ–¥–≥—Ä—É–ø–ø–∞ {name_teacher[0]} {number_aud[0]}\n 2—è –ø–æ–¥–≥—Ä—É–ø–ø–∞ {name_teacher[1]} {number_aud[1]}\n\n'
                        except:
                            answer += '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –ë–î\n\n'
                elif value.count(None) == 2:
                    answer += f'{ind}) {" ".join([i for i in value if i is not None])}\n\n'
                else:
                    answer += f'{ind}) {" ".join(["–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –ë–î" if i is None else i for i in value])}\n\n'

            else:
                answer += f'{ind}) {" ".join(list(value))}\n\n'
        return answer

    def schedule(self, bot, chat_id, message):
        """the method that answers the question "what is the schedule" """
        l = sorted(os.listdir('media/schedules'))
        num = re.search('[\d]', message)
        if '—Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è' == message:
            for name_file in l:
                with open(os.path.join('media/schedules', name_file), 'rb') as image:
                    bot.send_photo(chat_id, image)
        elif '—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ' == message:
            for name_file in l:
                if str(self.num_week) in name_file:
                    with open(os.path.join('media/schedules', name_file), 'rb') as image:
                        bot.send_photo(chat_id, image)
                        break
        elif num is not None and '—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ' in message and 0 < int(num.group()) < 5:
            for name_file in l:
                if str(num.group()) in name_file:
                    with open(os.path.join('media/schedules', name_file), 'rb') as image:
                        bot.send_photo(chat_id, image)
                        break
        else:
            bot.send_message(chat_id, '–í–≤–µ–¥–µ–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ!')

    def number_week(self):
        """the method that answers the question "number of the week" """
        data = {1: 'I', 2: 'II', 3: 'III', 4: 'IV'}
        return f'{data[self.num_week]}  –Ω–µ–¥–µ–ª—è.'

    def attestations(self, bot, chat_id, message):
        """the method answering the question "attestation" """
        l = sorted(os.listdir('media/attestations'))
        num = re.search('[\d]', message)
        if '–∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏' in message:
            for name_file in l:
                with open(os.path.join('media/attestations', name_file), 'rb') as image:
                    bot.send_photo(chat_id, image)
        elif num is not None:
            num = num.group()
            for name_file in l:
                if num in name_file:
                    with open(os.path.join('media/attestations', name_file), 'rb') as image:
                        bot.send_photo(chat_id, image)
                        break
            else:
                bot.send_message(chat_id, '–í–≤–µ–¥–µ–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!')
        else:
            bot.send_message(chat_id, '–í–≤–µ–¥–µ–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç!')

    def audience_couple(self):
        """the method that answers the question "where is the pair" """
        now_hour = datetime.datetime.now(tz=self.tz).hour
        now_minute = datetime.datetime.now(tz=self.tz).minute
        now_num, num = {1: '–ü–µ—Ä–≤–∞—è', 2: '–í—Ç–æ—Ä–∞—è', 3: '–¢—Ä–µ—Ç—å—è', 4: '–ß–µ—Ç–≤–µ—Ä—Ç–∞—è'}, 0
        if now_hour in [8, 9, 10, 11, 12, 13, 14, 15]:
            if now_hour == 8 and now_minute < 20:
                return '–ü–∞—Ä–∞ –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å!'
            elif now_hour in [8, 9]:
                num = 1
            elif (now_hour == 10 and now_minute > 9) or (now_hour == 11 and now_minute < 40):
                num = 2
            elif (now_hour == 12 and now_minute > 19) or (now_hour == 13 and now_minute < 50):
                num = 3
            elif (now_hour == 14 and now_minute >= 0) or (now_hour == 15 and now_minute < 30):
                num = 4
            if not num:
                return '–ü–µ—Ä–µ–º–µ–Ω–∞!'
            t = str(datetime.datetime.now(tz=self.tz))[:10]
            t = datetime.datetime.strptime(t, "%Y-%m-%d")
            day_week = calendar.day_name[t.today().weekday()].lower()
            name_table = self.name_week[self.num_week] + day_week
            data = self.cursor.execute(
                f'''SELECT {name_table}.id, subjects.name, type, name_teacher, number_auditorium, name_subgroup  
                FROM {name_table} 
                LEFT JOIN subjects ON {name_table}.id_subjects = subjects.id
                LEFT JOIN teachers ON {name_table}.id_teachers = teachers.id
                LEFT JOIN audiences ON {name_table}.id_audiences = audiences.id
                LEFT JOIN type_pair ON {name_table}.id_type_pair = type_pair.id
                LEFT JOIN subgroup ON {name_table}.id_subgroup = subgroup.id
                WHERE {name_table}.id = {num}''').fetchone()

            if None is not data:
                return f'{num}) ' + ' '.join([i for i in data[1:] if isinstance(i, str)])

            return f'{now_num[num]} –ø–∞—Ä–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!'

        return '–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –ø–∞—Ä—ã!'

    def exams(self):
        """the method that answers the question "when are the exams" """
        data = self.cursor.execute(
            f'''SELECT subjects.name, name_teacher, time
                            FROM exams
                            LEFT JOIN subjects ON exams.id_subjects = subjects.id
                            LEFT JOIN teachers ON exams.id_teachers = teachers.id''').fetchall()
        return '\n\n'.join([f'–ü—Ä–µ–¥–º–µ—Ç: {i[0]}\n–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {i[1]}\n–í—Ä–µ–º—è: {i[2]}' for i in data])

    def test_or_exams(self, name_subj):
        """the method that answers the question "on a certain subject test or exam" """
        data = self.cursor.execute(
            f'''SELECT subjects.name, category_pairs.category
                                    FROM subjects 
                                    LEFT JOIN category_pairs ON subjects.category_id = category_pairs.id''').fetchall()
        for s in data:
            if name_subj == s[0].lower().strip():
                return ' - '.join(s)

    def update(self):

        t = str(datetime.datetime.now(tz=self.tz))[:10]
        t = datetime.datetime.strptime(t, "%Y-%m-%d")
        date_today = t.today().date()
        data = self.cursor.execute('SELECT number, date FROM week').fetchone()
        n, d = data[0], data[1]
        if str(date_today) != str(d):
            self.cursor.execute(f'UPDATE week SET number = {n + 1 if n < 4 else 1}, date = "{date_today}"')
            self.sqlite_connection.commit()
            self.num_week = self.cursor.execute('SELECT number FROM week').fetchone()[0]

    def subjects(self):

        answer = ''
        data = self.cursor.execute(
            f'''SELECT subjects.name, category_pairs.category
                            FROM subjects 
                            LEFT JOIN category_pairs ON subjects.category_id = category_pairs.id
                            ORDER BY category_id''').fetchall()

        for s, c in data:
            answer += f'{s} - {c}\n'

        return answer

    def duty(self):
        std = self.cursor.execute('SELECT name, counter FROM students').fetchall()
        if self.duty_today != '':
            return self.duty_today
        data = min(std, key=lambda x: x[1])
        self.duty_today = data[0]
        return f'–°–µ–≥–æ–¥–Ω—è –¥–µ–∂—É—Ä–Ω—ã–π: {self.duty_today}'

    def next(self):

        if self.duty_today != '':
            for student in range(len(self.students)):
                if self.students[student][0] == self.duty_today and student + 1 != len(self.students):
                    self.duty_today = self.students[student+1][0]
                    return f'–°–ª–µ–¥—É—é—â–∏–π –¥–µ–∂—É—Ä–Ω—ã–π: {self.duty_today}'
                elif self.students[student][0] == self.duty_today and student + 1 == len(self.students):
                    self.students = self.students[0][0]
                    return f'–°–ª–µ–¥—É—é—â–∏–π –¥–µ–∂—É—Ä–Ω—ã–π: {self.duty_today}'

        return '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±—Ä–∞—Ç—å –¥–µ–∂—É—Ä–Ω–æ–≥–æ! /duty'

    def success(self):

        if self.duty_today != '':
            print(self.duty_today)
            self.cursor.execute(f'''UPDATE students
                                    SET counter = counter + 1
                                    WHERE name = "{self.duty_today}"''')
            self.sqlite_connection.commit()
            self.duty_today = ''
            return '–î–µ–∂—É—Ä—Å—Ç–≤–æ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ!'

        return '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±—Ä–∞—Ç—å –¥–µ–∂—É—Ä–Ω–æ–≥–æ! /duty'